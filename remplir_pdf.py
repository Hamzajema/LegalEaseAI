import requests
import json
from typing import Dict, Any
import PyPDF2
from reportlab.pdfgen import canvas
from reportlab.lib.pagesizes import letter
from reportlab.pdfbase import pdfmetrics
from reportlab.pdfbase.ttfonts import TTFont
from io import BytesIO
import fitz  # PyMuPDF pour meilleure extraction
from pathlib import Path

def call_groq_ai(prompt: str) -> str:
    """Appelle l'API Groq pour g√©n√©rer du contenu"""
    try:
        url = "https://api.groq.com/openai/v1/chat/completions"
        headers = {
            "Authorization": "Bearer ",
            "Content-Type": "application/json"
        }
        payload = {
            "model": "llama-3.3-70b-versatile",
            "messages": [{"role": "user", "content": prompt}],
            "max_tokens": 1024,
            "temperature": 0.7
        }
        response = requests.post(url, headers=headers, json=payload)
        data = response.json()
        
        if response.status_code != 200:
            print("Groq API Error Response:", data)
            return f"Error: {data.get('error', {}).get('message', 'Unknown error')}"
        
        return data.get("choices", [{}])[0].get("message", {}).get("content", "").strip() or "No response"
    except Exception as e:
        print("Groq API Error:", e)
        return "Error contacting AI."


def extract_pdf_structure(pdf_path: str) -> Dict[str, Any]:
    """Extrait la structure et le contenu du PDF"""
    try:
        # Utiliser PyMuPDF pour une meilleure extraction
        doc = fitz.open(pdf_path)
        
        pdf_data = {
            "pages": [],
            "text_content": "",
            "form_fields": [],
            "metadata": {}
        }
        
        # Extraire les m√©tadonn√©es
        pdf_data["metadata"] = doc.metadata
        
        # Extraire le contenu de chaque page
        for page_num in range(len(doc)):
            page = doc[page_num]
            
            # Extraire le texte
            text = page.get_text()
            pdf_data["text_content"] += f"\n--- Page {page_num + 1} ---\n{text}"
            
            # Extraire les widgets (champs de formulaire)
            widgets = page.widgets()
            for widget in widgets:
                field_info = {
                    "page": page_num + 1,
                    "name": widget.field_name or f"field_{page_num}_{widget.rect}",
                    "type": widget.field_type_string,
                    "value": widget.field_value,
                    "rect": list(widget.rect),
                }
                pdf_data["form_fields"].append(field_info)
            
            # Stocker les informations de la page
            pdf_data["pages"].append({
                "number": page_num + 1,
                "width": page.rect.width,
                "height": page.rect.height,
                "text": text
            })
        
        doc.close()
        return pdf_data
        
    except Exception as e:
        print(f"Erreur lors de l'extraction du PDF: {e}")
        # Fallback vers PyPDF2
        return extract_pdf_with_pypdf2(pdf_path)


def extract_pdf_with_pypdf2(pdf_path: str) -> Dict[str, Any]:
    """Extraction de secours avec PyPDF2"""
    pdf_data = {
        "pages": [],
        "text_content": "",
        "form_fields": [],
        "metadata": {}
    }
    
    try:
        with open(pdf_path, 'rb') as file:
            reader = PyPDF2.PdfReader(file)
            pdf_data["metadata"] = reader.metadata or {}
            
            for page_num, page in enumerate(reader.pages):
                text = page.extract_text()
                pdf_data["text_content"] += f"\n--- Page {page_num + 1} ---\n{text}"
                pdf_data["pages"].append({
                    "number": page_num + 1,
                    "text": text
                })
                
                # Essayer d'extraire les champs de formulaire
                if '/Annots' in page:
                    for annot in page['/Annots']:
                        obj = annot.get_object()
                        if obj.get('/Subtype') == '/Widget':
                            field_name = obj.get('/T', 'unknown')
                            field_value = obj.get('/V', '')
                            pdf_data["form_fields"].append({
                                "page": page_num + 1,
                                "name": field_name,
                                "value": field_value
                            })
    except Exception as e:
        print(f"Erreur avec PyPDF2: {e}")
    
    return pdf_data


def prepare_ai_prompt(pdf_data: Dict[str, Any], user_data: Dict[str, Any]) -> str:
    """Pr√©pare le prompt pour l'API Groq"""
    print("üìù Contenu du PDF envoy√© √† l'IA (extrait):")
    print(pdf_data['text_content'][:500])
    print("...\n")
    
    # Construire une description des champs du PDF
    fields_description = ""
    if pdf_data["form_fields"]:
        fields_description = "Champs du formulaire d√©tect√©s:\n"
        for field in pdf_data["form_fields"]:
            fields_description += f"- {field['name']} (Page {field['page']})\n"
    
    prompt = f"""Tu es un assistant expert qui remplit des formulaires PDF l√©gaux tunisiens.

DONN√âES UTILISATEUR DISPONIBLES:
{json.dumps(user_data, indent=2, ensure_ascii=False)}

STRUCTURE DU PDF:
{fields_description}

CONTENU DU PDF (avec les champs vides marqu√©s par des pointill√©s ‚Ä¶):
{pdf_data['text_content'][:4000]}

INSTRUCTIONS CRITIQUES:
1. Analyse TOUS les endroits avec des pointill√©s (‚Ä¶) ou espaces vides dans le PDF
2. Pour CHAQUE champ vide identifi√©, cherche dans les donn√©es utilisateur la valeur appropri√©e
3. Si les donn√©es ne contiennent pas exactement ce qui est demand√©, EXTRAIT l'information pertinente du texte fourni
4. Les champs √† remplir incluent typiquement:
   - Nom de la soci√©t√©
   - Capital social (montant en DT)
   - Adresse du si√®ge social
   - Noms des associ√©s/fondateurs
   - Dur√©e de la soci√©t√© (en ann√©es)
   - Nombre et valeur des parts sociales
   - Informations bancaires (banque, agence, num√©ro de compte)
   - Dates et signatures

5. IMPORTANT: Tu dois identifier et remplir TOUS les champs vides, pas seulement quelques-uns

Retourne un JSON avec cette structure exacte:
{{
    "filled_fields": [
        {{
            "field_name": "description exacte du champ (ex: 'au capital de', 'Si√®ge Social', 'Dur√©e')",
            "page": num√©ro de page,
            "value": "valeur extraite ou calcul√©e",
            "source": "explication d'o√π vient cette valeur"
        }}
    ],
    "missing_fields": ["seulement si vraiment impossible de trouver l'info"]
}}

RETOURNE UNIQUEMENT LE JSON, sans texte avant ou apr√®s."""

    return prompt


def fill_pdf_with_ai_data(
    pdf_path: str,
    output_path: str,
    filled_data: Dict[str, Any],
    pdf_structure: Dict[str, Any]
) -> str:
    """Cr√©e un nouveau PDF avec les donn√©es remplies"""
    
    try:
        # Ouvrir le PDF original
        doc = fitz.open(pdf_path)
        
        has_form_fields = len(pdf_structure.get("form_fields", [])) > 0
        fields_filled = 0
        used_dots = []  # Garder trace des pointill√©s d√©j√† utilis√©s
        
        if has_form_fields:
            # M√©thode 1: Remplir les champs de formulaire interactifs
            for field_info in filled_data.get("filled_fields", []):
                page_num = field_info.get("page", 1) - 1
                if page_num < 0 or page_num >= len(doc):
                    continue
                    
                page = doc[page_num]
                
                # Chercher le widget correspondant
                for widget in page.widgets():
                    if widget.field_name == field_info["field_name"]:
                        widget.field_value = str(field_info["value"])
                        widget.update()
                        fields_filled += 1
                        print(f"‚úì Champ rempli: {field_info['field_name']}")
        else:
            # M√©thode 2: Ajouter du texte directement sur le PDF (pas de champs interactifs)
            print("‚ö†Ô∏è Aucun champ de formulaire d√©tect√©. Ajout de texte sur le PDF...\n")
            
            # Extraire tous les pointill√©s sur toutes les pages
            all_dots_by_page = {}
            for p_num in range(len(doc)):
                p = doc[p_num]
                dots_list = []
                
                # Chercher diff√©rents patterns de pointill√©s
                for pattern in ["‚Ä¶‚Ä¶‚Ä¶‚Ä¶‚Ä¶‚Ä¶‚Ä¶‚Ä¶‚Ä¶‚Ä¶", "‚Ä¶‚Ä¶‚Ä¶‚Ä¶‚Ä¶‚Ä¶‚Ä¶", "‚Ä¶‚Ä¶‚Ä¶‚Ä¶", "‚Ä¶‚Ä¶", "‚Ä¶", ".....", "....."]:
                    found = p.search_for(pattern)
                    for rect in found:
                        # √âviter les doublons (m√™me zone)
                        is_duplicate = any(
                            abs(rect.x0 - d.x0) < 10 and abs(rect.y0 - d.y0) < 2 
                            for d in dots_list
                        )
                        if not is_duplicate:
                            dots_list.append(rect)
                
                # Trier par position (haut en bas, gauche √† droite)
                dots_list.sort(key=lambda r: (round(r.y0), r.x0))
                all_dots_by_page[p_num] = dots_list
                print(f"üìç Page {p_num + 1}: {len(dots_list)} zones de pointill√©s d√©tect√©es")
            
            print()
            
            for field_info in filled_data.get("filled_fields", []):
                page_num = field_info.get("page", 1) - 1
                if page_num < 0 or page_num >= len(doc):
                    continue
                
                page = doc[page_num]
                field_name = field_info["field_name"]
                value = str(field_info["value"])
                
                print(f"üîç Recherche position pour: {field_name[:60]}...")
                
                # Strat√©gie 1: Chercher le label du champ et les pointill√©s √† proximit√©
                text_instances = page.search_for(field_name)
                
                if not text_instances:
                    # Chercher par mots-cl√©s
                    keywords = [k for k in field_name.split() if len(k) > 3]
                    for keyword in keywords:
                        text_instances = page.search_for(keyword)
                        if text_instances:
                            print(f"   ‚Üí Trouv√© via mot-cl√©: {keyword}")
                            break
                
                position_found = False
                
                if text_instances:
                    label_rect = text_instances[0]
                    print(f"   ‚Üí Label trouv√© √†: ({label_rect.x0:.1f}, {label_rect.y0:.1f})")
                    
                    # Chercher les pointill√©s proches (m√™me ligne, √† droite du label)
                    available_dots = all_dots_by_page.get(page_num, [])
                    
                    for dots_rect in available_dots:
                        # Les pointill√©s doivent √™tre sur la m√™me ligne et apr√®s le label
                        same_line = abs(dots_rect.y0 - label_rect.y0) < 10
                        after_label = dots_rect.x0 > label_rect.x1
                        not_used = not any(
                            abs(dots_rect.x0 - ux) < 10 and abs(dots_rect.y0 - uy) < 10
                            for ux, uy in used_dots
                        )
                        
                        if same_line and after_label and not_used:
                            # Position trouv√©e !
                            # Calculer la position Y pour un bon alignement vertical
                            baseline_y = dots_rect.y1 - 2  # 2 pixels au-dessus du bas des pointill√©s
                            
                            # Effacer les pointill√©s
                            clear_rect = fitz.Rect(
                                dots_rect.x0 - 1,
                                dots_rect.y0 - 1,
                                dots_rect.x0 + 400,  # Large pour couvrir long texte
                                dots_rect.y1 + 1
                            )
                            page.draw_rect(clear_rect, color=(1, 1, 1), fill=(1, 1, 1))
                            
                            # Ins√©rer le texte
                            page.insert_text(
                                (dots_rect.x0 + 1, baseline_y),
                                value,
                                fontsize=9,
                                color=(0, 0, 0),
                                fontname="helv"
                            )
                            
                            used_dots.append((dots_rect.x0, dots_rect.y0))
                            fields_filled += 1
                            position_found = True
                            print(f"   ‚úÖ Texte ajout√© √† ({dots_rect.x0:.1f}, {baseline_y:.1f}): {value}\n")
                            break
                
                # Strat√©gie 2: Si aucun label trouv√©, utiliser les pointill√©s non utilis√©s dans l'ordre
                if not position_found:
                    available_dots = all_dots_by_page.get(page_num, [])
                    
                    for dots_rect in available_dots:
                        not_used = not any(
                            abs(dots_rect.x0 - ux) < 10 and abs(dots_rect.y0 - uy) < 10
                            for ux, uy in used_dots
                        )
                        
                        if not_used:
                            baseline_y = dots_rect.y1 - 2
                            
                            # Effacer les pointill√©s
                            clear_rect = fitz.Rect(
                                dots_rect.x0 - 1,
                                dots_rect.y0 - 1,
                                dots_rect.x0 + 400,
                                dots_rect.y1 + 1
                            )
                            page.draw_rect(clear_rect, color=(1, 1, 1), fill=(1, 1, 1))
                            
                            # Ins√©rer le texte
                            page.insert_text(
                                (dots_rect.x0 + 1, baseline_y),
                                value,
                                fontsize=9,
                                color=(0, 0, 0),
                                fontname="helv"
                            )
                            
                            used_dots.append((dots_rect.x0, dots_rect.y0))
                            fields_filled += 1
                            position_found = True
                            print(f"   ‚úÖ Texte ajout√© (pointill√©s s√©quentiels) √† ({dots_rect.x0:.1f}, {baseline_y:.1f}): {value}\n")
                            break
                
                if not position_found:
                    print(f"   ‚ö†Ô∏è Aucune position disponible\n")
        
        print(f"\n{'='*60}")
        print(f"üìä Total: {fields_filled} champs remplis sur {len(filled_data.get('filled_fields', []))}")
        print(f"{'='*60}\n")
        
        # Sauvegarder le PDF modifi√©
        doc.save(output_path)
        doc.close()
        
        return output_path
        
    except Exception as e:
        print(f"‚ùå Erreur lors du remplissage du PDF: {e}")
        import traceback
        traceback.print_exc()
        # Fallback: cr√©er un overlay avec ReportLab
        return create_pdf_overlay(pdf_path, output_path, filled_data, pdf_structure)


def create_pdf_overlay(
    pdf_path: str,
    output_path: str,
    filled_data: Dict[str, Any],
    pdf_structure: Dict[str, Any]
) -> str:
    """Cr√©e un overlay sur le PDF existant avec ReportLab"""
    
    try:
        from PyPDF2 import PdfReader, PdfWriter
        from reportlab.pdfgen import canvas
        from reportlab.lib.pagesizes import letter
        import io
        
        # Lire le PDF original
        reader = PdfReader(pdf_path)
        writer = PdfWriter()
        
        # Cr√©er un dictionnaire des champs par page
        fields_by_page = {}
        for field in filled_data.get("filled_fields", []):
            page_num = field.get("page", 1) - 1
            if page_num not in fields_by_page:
                fields_by_page[page_num] = []
            fields_by_page[page_num].append(field)
        
        # Traiter chaque page
        for page_num in range(len(reader.pages)):
            page = reader.pages[page_num]
            
            # S'il y a des champs √† remplir sur cette page
            if page_num in fields_by_page:
                # Cr√©er un overlay avec ReportLab
                packet = io.BytesIO()
                
                # Obtenir les dimensions de la page
                page_width = float(page.mediabox.width)
                page_height = float(page.mediabox.height)
                
                can = canvas.Canvas(packet, pagesize=(page_width, page_height))
                can.setFont("Helvetica", 10)
                
                # Ajouter les textes sur l'overlay
                for field in fields_by_page[page_num]:
                    field_name = field["field_name"]
                    value = str(field["value"])
                    
                    # Positions estim√©es (√† ajuster selon votre PDF)
                    # Ces positions sont bas√©es sur une analyse du contenu
                    x, y = estimate_field_position(field_name, page_height)
                    
                    if x and y:
                        can.drawString(x, y, value)
                        print(f"‚úì Overlay ajout√©: {field_name[:50]}... = {value}")
                
                can.save()
                
                # Fusionner l'overlay avec la page originale
                packet.seek(0)
                overlay_pdf = PdfReader(packet)
                page.merge_page(overlay_pdf.pages[0])
            
            writer.add_page(page)
        
        # Ajouter les m√©tadonn√©es
        if pdf_structure.get("metadata"):
            writer.add_metadata(pdf_structure["metadata"])
        
        # √âcrire le PDF final
        with open(output_path, 'wb') as output_file:
            writer.write(output_file)
        
        return output_path
        
    except Exception as e:
        print(f"Erreur lors de la cr√©ation de l'overlay: {e}")
        import traceback
        traceback.print_exc()
        return None


def estimate_field_position(field_name: str, page_height: float) -> tuple:
    """Estime la position d'un champ bas√© sur son nom"""
    
    # Mapping des positions communes (√† adapter selon votre PDF)
    positions = {
        "capital": (200, page_height - 100),
        "Si√®ge Social": (200, page_height - 120),
        "soussign": (100, page_height - 180),
        "D√©nomination": (200, page_height - 400),
        "Dur√©e": (200, page_height - 450),
        "Capital social": (200, page_height - 500),
    }
    
    # Rechercher une correspondance partielle
    for key, pos in positions.items():
        if key.lower() in field_name.lower():
            return pos
    
    # Position par d√©faut
    return (150, page_height - 200)


def process_pdf_with_ai(
    pdf_path: str,
    user_data: Dict[str, Any],
    output_path: str = "filled_form.pdf"
) -> Dict[str, Any]:
    """Fonction principale pour traiter le PDF avec l'IA"""
    
    print("üìÑ Extraction de la structure du PDF...")
    pdf_structure = extract_pdf_structure(pdf_path)
    
    print(f"‚úì {len(pdf_structure['pages'])} pages extraites")
    print(f"‚úì {len(pdf_structure['form_fields'])} champs de formulaire d√©tect√©s")
    
    print("\nü§ñ Pr√©paration du prompt pour l'IA...")
    prompt = prepare_ai_prompt(pdf_structure, user_data)
    
    print("üîÑ Appel de l'API Groq...")
    ai_response = call_groq_ai(prompt)
    
    print("\nüìù R√©ponse de l'IA:")
    print(ai_response)
    
    # Parser la r√©ponse JSON
    try:
        # Nettoyer la r√©ponse (enlever les markdown code blocks si pr√©sents)
        cleaned_response = ai_response.strip()
        if cleaned_response.startswith("```json"):
            cleaned_response = cleaned_response[7:]
        if cleaned_response.startswith("```"):
            cleaned_response = cleaned_response[3:]
        if cleaned_response.endswith("```"):
            cleaned_response = cleaned_response[:-3]
        
        filled_data = json.loads(cleaned_response.strip())
    except json.JSONDecodeError as e:
        print(f"‚ö†Ô∏è Erreur de parsing JSON: {e}")
        filled_data = {"filled_fields": [], "missing_fields": []}
    
    print("\nüìù Cr√©ation du PDF rempli...")
    result_path = fill_pdf_with_ai_data(pdf_path, output_path, filled_data, pdf_structure)
    
    if result_path:
        print(f"‚úÖ PDF cr√©√© avec succ√®s: {result_path}")
    else:
        print("‚ùå Erreur lors de la cr√©ation du PDF")
    
    return {
        "success": result_path is not None,
        "output_path": result_path,
        "filled_fields": filled_data.get("filled_fields", []),
        "missing_fields": filled_data.get("missing_fields", []),
        "pdf_structure": pdf_structure
    }


# Exemple d'utilisation
if __name__ == "__main__":
    # Donn√©es utilisateur de votre application
    user_data = {
    "startupobjet": "La soci√©t√© d'expertise comptable et de commissariat aux comptes, Imaginaire Conseil SARL, au capital de 50‚ÄØ000 Dinars Tunisiens, a son si√®ge social situ√© au 12 Rue de l'Innovation, 1002 Tunis, Tunisie.",
    "realisation":" Les soussign√©s, M. Hamza Jemaa et Mme Latifa Jaafari, ont √©tabli les statuts de cette soci√©t√© √† responsabilit√© limit√©e conform√©ment aux lois et r√®glements applicables, notamment la loi 88-108 relative √† l'exercice de la profession d'expert-comptable en Tunisie. La soci√©t√© a pour objet l'exercice de la profession d'expert-comptable, incluant la r√©alisation de missions de comptabilit√©, d'audit et de conseil aux entreprises. Elle peut r√©aliser toutes op√©rations compatibles avec son objet social, mais ne peut prendre de participations financi√®res dans d'autres soci√©t√©s industrielles, commerciales, agricoles ou bancaires, ni dans des soci√©t√©s civiles, et ne doit √™tre sous la d√©pendance, directe ou indirecte, d'aucune autre entit√©. La d√©nomination sociale de la soci√©t√© est Imaginaire Conseil SARL. Le si√®ge social est fix√© au 12 Rue de l'Innovation, 1002 Tunis, Tunisie. La dur√©e de la soci√©t√© est fix√©e √† 99 ans √† compter de son immatriculation au registre du commerce, sauf dissolution anticip√©e ou prorogation d√©cid√©e par les associ√©s selon les r√®gles de d√©lib√©ration en assembl√©e g√©n√©rale extraordinaire. Le capital social, fix√© √† 50‚ÄØ000 Dinars Tunisiens, est divis√© en 500 parts sociales de 100 D.T chacune, attribu√©es aux associ√©s proportionnellement √† leurs apports : 250 parts √† M. Hamza Jemaa et 250 parts √† Mme Latifa Jaafari. Les apports en num√©raire, int√©gralement lib√©r√©s, ont √©t√© d√©pos√©s au compte indisponible ouvert aupr√®s de la Banque Centrale de Tunisie, agence Tunis-Centre, n¬∞ 123456789. Entre les associ√©s, les parts sociales sont librement cessibles. Toute cession √† des tiers n√©cessite le consentement de la majorit√© des associ√©s repr√©sentant au moins les trois quarts du capital social et respecte la l√©gislation sur la d√©tention des parts par les experts-comptables. Toute modification du capital, par augmentation ou r√©duction, sera d√©cid√©e conform√©ment aux statuts et √† la loi, tout en respectant la r√©partition pr√©vue initialement. En cas de d√©c√®s ou d'incapacit√© d'un associ√©, la soci√©t√© continue avec les associ√©s restants ou par l'agr√©ment de nouveaux associ√©s, en veillant √† ce qu'aucun non-membre de l'Ordre des Experts Comptables ne d√©tienne plus de 25 % du capital. La soci√©t√© tient un registre des dirigeants et membres du conseil de surveillance, ainsi qu'un registre des parts sociales avec l'identit√© des propri√©taires. Les statuts enregistr√©s et toutes modifications sont communiqu√©s √† l'Ordre des Experts Comptables et disponibles pour les pouvoirs publics et tiers int√©ress√©s. M. Hamza Jemaa est nomm√© g√©rant pour une dur√©e de trois ans renouvelable. Il dispose des pouvoirs les plus √©tendus pour agir au nom de la soci√©t√©, sous r√©serve des pouvoirs l√©gaux attribu√©s aux associ√©s. Le g√©rant per√ßoit une r√©mun√©ration mensuelle de 2‚ÄØ500 D.T, et ses frais de repr√©sentation et de d√©placement sont rembours√©s sur pr√©sentation de justificatifs. Les d√©cisions des associ√©s sont qualifi√©es d'ordinaires ou d'extraordinaires. Les d√©cisions ordinaires, telles que l'approbation des comptes, la fixation des dividendes et l'affectation des r√©serves, sont adopt√©es √† la majorit√© simple. Les d√©cisions extraordinaires, incluant la modification des statuts ou l'agr√©ment de nouveaux associ√©s, n√©cessitent la majorit√© absolue des associ√©s et la majorit√© des trois quarts du capital social. Chaque exercice social dure douze mois, du 1er janvier au 31 d√©cembre, le premier exercice prenant effet √† la date d'immatriculation et se terminant le 31 d√©cembre 2025. Sur les b√©n√©fices annuels, une r√©serve l√©gale obligatoire est constitu√©e, et le surplus peut √™tre r√©parti entre les associ√©s ou attribu√© au g√©rant selon d√©cision ordinaire. La soci√©t√© est dissoute √† l'arriv√©e du terme ou par d√©cision anticip√©e des associ√©s repr√©sentant la majorit√© absolue et trois quarts du capital social. Fait √† Tunis, en autant d'exemplaires que de droit."
    }
    
    
    # Chemin du PDF √† remplir
    pdf_path = "formulaire_legal.pdf"  # Remplacer par votre fichier
    output_path = "formulaire_rempli.pdf"
    
    # V√©rifier que le fichier existe
    if not Path(pdf_path).exists():
        print(f"‚ùå Fichier non trouv√©: {pdf_path}")
        print("üìù Cr√©ez un fichier PDF ou modifiez le chemin dans le code")
    else:
        # Traiter le PDF
        result = process_pdf_with_ai(pdf_path, user_data, output_path)
        
        print("\n" + "="*50)
        print("üìä R√âSUM√â")
        print("="*50)
        print(f"Succ√®s: {result['success']}")
        print(f"Champs remplis: {len(result['filled_fields'])}")
        print(f"Champs manquants: {len(result['missing_fields'])}")
        
        if result['missing_fields']:
            print("\n‚ö†Ô∏è Champs non remplis:")
            for field in result['missing_fields']:
                print(f"  - {field}")